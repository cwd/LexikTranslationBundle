k_phoen_doctrine_state_machine:
   auto_injection:     true    # should we automatically inject state machines into hydrated objects?
   auto_validation:    true    # should we validate any status change before the persistence happens?

   state_machines:
        # seems not to work with inheritance - supplier and mortician should always be the same!
        # see https://github.com/K-Phoen/DoctrineStateMachineBehavior/issues/8
        supplier_machine:
            class:      \Aspetos\Model\Entity\Supplier
            property:   state
            states:
                new:        {type: initial}
                proposed:   ~
                active:     ~
                rejected:   {type: final}
                blocked:    {type: final}
            transitions:
                propose:    {from: [new], to: proposed}
                approve:    {from: [new], to: active}
                reject:     {from: [new], to: rejected}

        mortician_machine:
            class:      \Aspetos\Model\Entity\Mortician
            property:   state
            states:
                new:        {type: initial}
                proposed:   ~
                active:     ~
                rejected:   {type: final}
                blocked:    {type: final}
            transitions:
                propose:    {from: [new], to: proposed}
                approve:    {from: [new], to: active}
                reject:     {from: [new], to: rejected}

        reminder_machine:
            class:        \Aspetos\Model\Entity\Reminder
            property:     state
            states:
                new:          {type: initial}
                needoptin:    ~
                optinsend:    ~
                active:       ~
                unsubscribed: {type: final}
                bounced:      {type: final}
            transitions:
                sendoptin:    {from: [new], to: needoptin}
                optined:      {from: [needoptin], to: optinsend}
                activate:     {from: [new, optinsend], to: active}
                unsubscribe:  {from: [active], to: unsubscribed}
                bounce:       {from: [new, needoptin, active, optinsend], to: bounced}

        # deactivated for the moment for the same reason
        #user_machine:
        #    class:      \Aspetos\Model\Entity\BaseUser
        #    property:   state
        #    states:
        #        new:        {type: initial}
        #        optin:      ~
        #        active:     ~
        #        blocked:    {type: final}
        #    transitions:
        #        notify:     {from: [new], to: optin}
        #        activate:   {from: [new, optin, blocked], to: active}
        #        block:      {from: [new, optin, active], to: blocked}
