<?xml version="1.0" encoding="UTF-8"?>

<project name="Aspetos" default="build">
    <property name="workspace" value="${project.basedir}" />
    <property name="sourcedir" value="${project.basedir}/src" />
    <property name="builddir" value="${workspace}/build" />

    <property name="bin.symfony" value='"${php.interpreter}" ${project.basedir}/bin/console' />

    <target name="build"
            depends="prepare,vendors,lint,phploc,phpmd,phpcs,phpcpd,phpunit"/>

    <target name="build-parallel"
            depends="prepare,lint,tools-parallel,phpunit,phpcb"/>

    <target name="tools-parallel" description="Run tools in parallel">
        <parallel threadCount="4">
            <sequential>
                <!--<antcall target="pdepend"/>-->
                <antcall target="phpmd"/>
            </sequential>
            <antcall target="phpcpd"/>
            <antcall target="phpcs"/>
            <antcall target="phploc"/>
            <!--<antcall target="phpdox"/>-->
        </parallel>
    </target>

    <target name="clean" description="Cleanup build artifacts">
        <delete dir="${project.basedir}/build/api"/>
        <delete dir="${project.basedir}/build/code-browser"/>
        <delete dir="${project.basedir}/build/coverage"/>
        <delete dir="${project.basedir}/build/logs"/>
        <delete dir="${project.basedir}/build/pdepend"/>
    </target>

    <target name="prepare" depends="clean" description="Prepare for build">
        <mkdir dir="${project.basedir}/build/api"/>
        <mkdir dir="${project.basedir}/build/code-browser"/>
        <mkdir dir="${project.basedir}/build/coverage"/>
        <mkdir dir="${project.basedir}/build/logs"/>
        <mkdir dir="${project.basedir}/build/pdepend"/>
        <mkdir dir="${project.basedir}/build/phpdox"/>
    </target>

    <target name="lint" description="Perform syntax check of sourcecode files">
        <apply executable="php" failonerror="true" output="/dev/null" logError="yes">
            <arg value="-l" />
            <fileset dir="${sourcedir}">
                <include name="**/*.php" />
                <modified />
            </fileset>
            <fileset dir="${project.basedir}/src/">
                <include name="**/*Test.php" />
                <modified />
            </fileset>
        </apply>
    </target>

    <target name="phploc" description="Measure project size using PHPLOC">
        <exec executable="bin/phploc">
            <arg path="${project.basedir}/src" />
        </exec>
    </target>

    <target name="pdepend" description="Calculate software metrics using PHP_Depend">
        <exec executable="bin/pdepend">
            <arg value="--jdepend-xml=${project.basedir}/build/logs/jdepend.xml" />
            <arg value="--jdepend-chart=${project.basedir}/build/pdepend/dependencies.svg" />
            <arg value="--overview-pyramid=${project.basedir}/build/pdepend/overview-pyramid.svg" />
            <arg path="${project.basedir}/src" />
        </exec>
    </target>

    <target name="phpmd"
            description="Perform project mess detection using PHPMD and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="bin/phpmd">
            <arg path="${project.basedir}/src" />
            <arg value="text" />
            <arg value="${project.basedir}/build/phpmd.xml" />
            <arg value="--exclude" />
            <arg value="Aspetos/Bundle/LegacyBundle/*" />
            <arg value="--exclude" />
            <arg value="*/Model/*" />
        </exec>
    </target>

    <target name="phpmd-ci" description="Perform project mess detection using PHPMD creating a log file for the continuous integration server">
        <exec executable="bin/phpmd">
            <arg path="${project.basedir}/src" />
            <arg value="xml" />
            <arg value="${project.basedir}/build/phpmd.xml" />
            <arg value="--reportfile" />
            <arg value="${project.basedir}/build/logs/pmd.xml" />
            <arg value="--exclude" />
            <arg value="*/LegacyBundle/*" />
        </exec>
    </target>

    <target name="phpcs"
            description="Find coding standard violations using PHP_CodeSniffer and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="${php.interpreter}">
            <arg value="${project.basedir}/bin/phpcs" />
            <arg value="--standard=${project.basedir}/bin/Symfony2/ruleset.xml" />
            <arg value="--extensions=php" />
            <arg value="--ignore=*/tests/*,*/Entity/*,*/LegacyBundle/Model/Enttiy/*" />
            <arg value="--tab-width=4" />
            <arg path="${sourcedir}" />
        </exec>
    </target>

    <target name="phpcs-ci" description="Find coding standard violations using PHP_CodeSniffer creating a log file for the continuous integration server">
        <exec executable="bin/phpcs" output="/dev/null">
            <arg value="--report=checkstyle" />
            <arg value="--report-file=${project.basedir}/build/logs/checkstyle.xml" />
            <arg value="--standard=bin/Symfony2/ruleset.xml" />
            <arg value="--ignore=*/tests/*,*/Entity/*" />
            <arg value="--extensions=php" />
            <arg value="--tab-width=4" />
            <arg path="${sourcedir}" />
        </exec>
    </target>

    <target name="phpcpd" description="Find duplicate code using PHPCPD">
        <exec executable="bin/phpcpd">
            <arg value="--log-pmd" />
            <arg value="${project.basedir}/build/logs/pmd-cpd.xml" />
            <arg path="${project.basedir}/src" />
        </exec>
    </target>

    <target name="phpdox" description="Generate API documentation using phpDox">
        <exec executable="bin/phpdox.phar">
            <arg value="-f" />
            <arg value="${project.basedir}/build/phpdox.xml" />
        </exec>
    </target>

    <target name="phpunit" description="Run unit tests with PHPUnit">
        <exec executable="bin/phpunit" failonerror="true">
            <arg value="-c" />
            <arg path="${project.basedir}/phpunit.xml.dist" />
        </exec>
    </target>

    <target name="phpcb" description="Aggregate tool output with PHP_CodeBrowser">
        <exec executable="bin/phpcb">
            <arg value="--log" />
            <arg path="${project.basedir}/build/logs" />
            <arg value="--source" />
            <arg path="${project.basedir}/src" />
            <arg value="--output" />
            <arg path="${project.basedir}/build/code-browser" />
        </exec>
    </target>

    <target name="vendors" description="Update vendors">
        <exec executable="php" failonerror="true">
            <env key="SYMFONY_ENV" value="test" />
            <arg value="/usr/local/bin/composer.phar" />
            <arg value="install" />
            <arg value="--dev" />
            <arg value="--prefer-dist" />
        </exec>
        <exec executable="bin/console" failonerror="true">
            <arg value="cache:clear" />
            <arg value="--env=test" />
            <arg value="--no-warmup" />
        </exec>
        <exec executable="bin/console">
            <arg value="doctrine:database:drop" />
            <arg value="-n" />
            <arg value="--force" />
            <arg value="--env=test" />
        </exec>
        <exec executable="bin/console">
            <arg value="doctrine:database:create" />
            <arg value="-n" />
            <arg value="--env=test" />
        </exec>
        <exec executable="bin/console">
            <arg value="doctrine:schema:update" />
            <arg value="-n" />
            <arg value="--complete" />
            <arg value="--force" />
            <arg value="--env=test" />
        </exec>
    </target>

    <target name="cc" depends="cc:dev, cc:prod" description="Install assets and clear all caches" />

    <target name="cc:dev" depends="assets" description="Install assets and clear dev cache">
        <SymfonyConsole console="${bin.symfony}" command="cache:clear">
            <arg name="env" value="dev" />
        </SymfonyConsole>
        <SymfonyConsole console="${bin.symfony}" command="assetic:dump">
            <arg name="env" value="dev" />
        </SymfonyConsole>
    </target>

    <target name="cc:prod" depends="assets" description="Install assets and clear prod cache">
        <SymfonyConsole console="${bin.symfony}" command="cache:clear">
            <arg name="env" value="prod" />
        </SymfonyConsole>
        <SymfonyConsole console="${bin.symfony}" command="assetic:dump">
            <arg name="env" value="prod" />
        </SymfonyConsole>
    </target>

    <target name="assets" description="Install assets">
        <SymfonyConsole console="${bin.symfony}" command="assets:install">
            <arg name="symlink" />
        </SymfonyConsole>
    </target>
</project>
